{
    "include": ["src", ".claude", "tests"],
    "exclude": [
      "**/node_modules",
      "**/__pycache__",
      "src/experimental",
      "src/typestubs"
    ],
    "executionEnvironments": [
      {
        "root": "tests/claude_hook/post_tools",
        "extraPaths": [".claude/hooks/post_tools"]
      },
      {
        "root": "tests/claude_hook/pre_tools",
        "extraPaths": [".claude/hooks/pre_tools"]
      },
      {
        "root": "tests/claude_hook/logging",
        "extraPaths": [".claude/hooks/logging"]
      },
      {
        "root": ".claude/hooks/post_tools",
        "extraPaths": [".claude/hooks/post_tools"]
      },
      {
        "root": ".claude/hooks/pre_tools",
        "extraPaths": [".claude/hooks/pre_tools"]
      },
      {
        "root": ".claude/hooks/logging",
        "extraPaths": [".claude/hooks/logging"]
      }
    ],
    "pythonVersion": "3.12",
    "typeCheckingMode": "strict",
    
    // Strict typing - no Any types allowed except for subprocess.args
    "reportAny": "error",
    "reportExplicitAny": "error",
    "reportUnknownMemberType": "error",
    "reportUnknownArgumentType": "error",
    "reportUnknownVariableType": "error",
    "reportUnknownLambdaType": "error",
    "reportUnknownParameterType": "error",
    "reportMissingImports": "error",
    
    // These are acceptable for a hook script
    "reportDeprecated": "information",
    "reportMissingTypeStubs": false,
    "reportUnusedVariable": "warning",
    "reportUnusedParameter": "warning",
    "reportUnusedImport": "warning",
  
    // String concatenation is fine for formatting
    "reportImplicitStringConcatenation": false,
    "failOnWarnings": true,

    // Allow suppressing specific unavoidable Any types with type: ignore
    "enableTypeIgnoreComments": true
  }